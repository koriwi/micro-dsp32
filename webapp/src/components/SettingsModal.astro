---
import Button from "./Button.astro";
import Modal from "./Modal.astro";
import LabelInput from "./LabelInput.astro";
import LabelSelect from "./LabelSelect.astro";
import type { HTMLAttributes } from "astro/types";
interface Props extends HTMLAttributes<"div"> {}
---

<style>
  @import "tailwindcss";
  #st-name:checked ~ * {
    & #name-view {
      @apply flex!;
    }
    & [for="st-name"] {
      @apply bg-white text-black;
    }
  }
  #st-i2s0:checked ~ * {
    & #i2s0-view {
      @apply flex!;
    }
    & [for="st-i2s0"] {
      @apply bg-white text-black;
    }
  }
</style>
<settings-modal {...Astro.props}>
  <Modal title="Settings">
    <div class="size-full">
      <input
        class="hidden"
        type="radio"
        name="settings-tab"
        value="name"
        id="st-name"
        checked
      />
      <input
        class="hidden"
        type="radio"
        name="settings-tab"
        value="i2s0"
        id="st-i2s0"
      />
      <div class="flex">
        <div class="flex gap-0.5 bg-white border border-solid border-white">
          <label class="px-4 py-1 h-full bg-black transition" for="st-name"
            >Name</label
          >
          <label class="px-4 py-1 h-full bg-black transition" for="st-i2s0"
            >Pins I2S0</label
          >
        </div>
      </div>
      <div
        class="flex border border-solid border-white p-2 *:transition-all min-h-full md:min-h-[500px]"
      >
        <form
          id="name-view"
          action="/api"
          class="hidden flex-col justify-between gap-4 w-full"
        >
          <input type="hidden" name="action" value="set" />
          <input type="hidden" name="key" value="wifi" />
          <LabelInput id="name" name="name" value="" label="Name (in wifi)" />
          <div>
            <p>
              This will restart the device automatically after you press
              "Apply". Don't forget to connect to the new wifi.
            </p>
            <div class="flex gap-2 justify-end">
              <Button text="Apply" />
            </div>
          </div>
        </form>
        <form
          id="i2s0-view"
          action="/api"
          class="hidden flex-col gap-2 w-full justify-between"
        >
          <input type="hidden" name="action" value="set" />
          <input type="hidden" name="key" value="i2s0" />
          <div>
            <LabelSelect label="I2S mode" id="master0" name="master" required>
              <option value="" disabled selected>please choose</option>
              <option value="0">Master</option>
              <option value="1">Slave</option>
            </LabelSelect>

            <LabelInput
              id="mclk0"
              name="mclk"
              value=""
              label="MCLK"
              type="number"
              min="0"
              max="39"
              step="1"
              required
            />
            <LabelInput
              id="bclk0"
              name="bclk"
              value=""
              label="SCK/BCLK"
              type="number"
              min="0"
              max="39"
              step="1"
              required
            />
            <LabelInput
              id="ws0"
              name="ws"
              value=""
              label="WS/LRCLK"
              type="number"
              min="0"
              max="39"
              step="1"
              required
            />
            <LabelInput
              id="din0"
              name="din"
              value=""
              label="DIn"
              type="number"
              min="0"
              max="39"
              step="1"
              required
            />
            <LabelInput
              id="dout0"
              name="dout"
              value=""
              label="DOut"
              type="number"
              min="0"
              max="39"
              step="1"
              required
            />
          </div>
          <div>
            <p>
              This will restart the device automatically after you press
              "Apply". This is the I2S for the input and the output of channel 1
              and 2. If you use an ADC as input, select master mode. If you use
              another device as input, like a squeezelite-esp32, select slave
              mode.
            </p>
            <div class="flex gap-2 justify-end">
              <Button text="Apply" />
            </div>
          </div>
        </form>
      </div>
    </div>
  </Modal>
</settings-modal>
<script>
  class SettingsModal extends HTMLElement {
    static observedAttributes = ["settings"];

    nameInput: HTMLInputElement;
    masterInput: HTMLInputElement;
    mclkInput: HTMLInputElement;
    bclkInput: HTMLInputElement;
    wsInput: HTMLInputElement;
    dinInput: HTMLInputElement;
    doutInput: HTMLInputElement;

    constructor() {
      super();
      this.nameInput = this.querySelector("#name")!;
      this.masterInput = this.querySelector("#master0")!;
      this.mclkInput = this.querySelector("#mclk0")!;
      this.bclkInput = this.querySelector("#bclk0")!;
      this.wsInput = this.querySelector("#ws0")!;
      this.dinInput = this.querySelector("#din0")!;
      this.doutInput = this.querySelector("#dout0")!;
    }
    private hide() {
      this.classList.add("hidden");
      this.classList.remove("flex");
    }
    private show() {
      this.classList.add("flex");
      this.classList.remove("hidden");
    }
    connectedCallback() {
      const title = this.dataset.title;
      if (!title) return;

      window.addEventListener(`modal-${title}-open`, (_e) => {
        this.show();
      });
      window.addEventListener(`modal-${title}-close`, (_e) => {
        this.hide();
      });
      this.addEventListener("click", (e) => {
        if (e.target == this) {
          this.hide();
        }
      });
      window.addEventListener("keydown", (e) => {
        if (e.key == "Escape") {
          this.hide();
        }
      });
    }

    attributeChangedCallback(
      name: string,
      _oldValue: string | null,
      newValue: string | null,
    ) {
      if (name !== "settings") return;
      const config = JSON.parse(newValue || "{}");

      if (config.wifi.name != null) this.nameInput.value = config.wifi.name;
      if (config.i2s0.master != null)
        this.masterInput.value = config.i2s0.master;
      if (config.i2s0.mclk != null) this.mclkInput.value = config.i2s0.mclk;
      if (config.i2s0.bclk != null) this.bclkInput.value = config.i2s0.bclk;
      if (config.i2s0.ws != null) this.wsInput.value = config.i2s0.ws;
      if (config.i2s0.din != null) this.dinInput.value = config.i2s0.din;
      if (config.i2s0.dout != null) this.doutInput.value = config.i2s0.dout;
    }
  }
  customElements.define("settings-modal", SettingsModal);
</script>
