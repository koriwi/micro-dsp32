---
interface Props {
  pass: "high" | "low";
  id: string;
  channel: number;
}
const { pass, id, channel } = Astro.props;
---

<x-pass data-type={pass} data-channel={channel} id={id}>
  <div class="p-0.5 px-2 rounded-t bg-white text-black inline-block">
    {pass === "high" ? "Highpass" : "Lowpass"}
  </div>
  <div
    class="grid grid-cols-[1fr_1fr_4fr] gap-4 w-full border border-solid border-white rounded-sm rounded-tl-none p-4"
  >
    <label class="flex gap-2"> Freq (Hz):</label>
    <input
      class="border border-solid border-white text-center md:text-right w-16 font-mono"
      type="number"
      id="p-f"
    />
    <input
      class="flex-grow-1"
      type="range"
      step="1"
      min="10"
      max="20000"
      id="p-f-range"
    />
    <label class="flex flex-grow-1 gap-2"> Q-Factor:</label>
    <input
      class="border border-solid border-white text-center md:text-right w-16 font-mono disabled:text-gray-500"
      type="number"
      id="p-q"
      step="0.01"
      value="0.70"
    />
    <input
      class="flex-grow-1"
      type="range"
      min="0"
      max="10"
      step="0.01"
      id="p-q-range"
    />
    <label class="flex flex-grow-1 gap-2"> Order:</label>
    <select
      id="p-order"
      class="border border-solid border-white flex-grow-1 col-span-2 *:bg-black"
    >
      <option value="0">disabled</option>
      <option value="1">1st (12 dB/oct)</option>
      <option value="2">2nd (24 dB/oct)</option>
    </select>
  </div>
</x-pass>
<script>
  import {
    rangeChangedLog,
    valueChangedLog,
    update,
    valueChanged,
    toLog,
    fromLog,
  } from "./script.js";

  class XPass extends HTMLElement {
    static observedAttributes = ["config"];

    passFreq: HTMLInputElement;
    passFreqRange: HTMLInputElement;
    passQ: HTMLInputElement;
    passQRange: HTMLInputElement;
    passOrder: HTMLInputElement;

    constructor() {
      super();

      this.passFreq = this.querySelector("#p-f") as HTMLInputElement;
      this.passFreqRange = this.querySelector("#p-f-range") as HTMLInputElement;

      this.passQ = this.querySelector("#p-q") as HTMLInputElement;
      this.passQRange = this.querySelector("#p-q-range") as HTMLInputElement;

      this.passOrder = this.querySelector("#p-order") as HTMLInputElement;
    }

    connectedCallback() {
      const type = this.dataset.type as "low" | "high";
      const channel = parseInt(this.dataset.channel ?? "1");
      this.passFreqRange.addEventListener("input", (e) => {
        const value = rangeChangedLog(this.passFreq)(e);
        update(type, channel, "freq", parseInt(value));
      });
      this.passFreq.addEventListener("change", (e) => {
        const value = valueChangedLog(this.passFreqRange)(e);
        update(type, channel, "freq", parseInt(value));
      });

      this.passQRange.addEventListener("input", (e) => {
        const value = valueChanged(this.passQ)(e);
        update(type, channel, "q", parseFloat(value));
      });
      this.passQ.addEventListener("change", (e) => {
        const value = valueChanged(this.passQRange)(e);
        update(type, channel, "q", Math.round(parseFloat(value) * 100) / 100);
      });

      this.passOrder.addEventListener("change", (e) => {
        if ((e.target as HTMLInputElement).value == "2") {
          this.passQ.disabled = false;
          this.passQRange.disabled = false;
        } else {
          this.passQ.disabled = true;
          this.passQRange.disabled = true;
        }
        update(
          type,
          channel,
          "order",
          parseInt((e.target as HTMLInputElement).value),
        );
      });
    }

    attributeChangedCallback(
      name: string,
      _oldValue: string | null,
      newValue: string | null,
    ) {
      if (name !== "config") return;
      const config = JSON.parse(newValue ?? "{}");
      console.log(config);
      if (config.freq) {
        this.passFreq.value = config.freq;
        this.passFreqRange.value = fromLog(parseInt(config.freq)).toString();
      }
      if (config.order) {
        this.passOrder.value = config.order;
        if (config.order == "2") {
          this.passQ.disabled = false;
          this.passQRange.disabled = false;
        } else {
          this.passQ.disabled = true;
          this.passQRange.disabled = true;
        }
      }
      if (config.q) {
        this.passQ.value = (
          Math.round(parseFloat(config.q) * 100) / 100
        ).toString();
        this.passQRange.value = config.q;
      }
    }
  }
  customElements.define("x-pass", XPass);
</script>
