---
import XPass from "../components/XPass/index.astro";
import Layout from "../layouts/default.astro";
import Button from "../components/Button/index.astro";
---

<style>
  @import "tailwindcss";
  #ch1:checked ~ div {
    & #view1 {
      display: flex;
    }
    & [for="ch1"] {
      @apply bg-white text-black;
    }
  }
  #ch2:checked ~ div {
    & #view2 {
      display: flex;
    }
    & [for="ch2"] {
      @apply bg-white text-black;
    }
  }
</style>
<Layout>
  <canvas class="min-h-0" id="graph"></canvas>
  <div class="m-4">
    <input
      type="radio"
      name="channel"
      value="1"
      id="ch1"
      class="hidden"
      checked
    />
    <input type="radio" name="channel" value="2" id="ch2" class="hidden" />
    <div class="flex items-end justify-between">
      <h1
        class="text-2xl p-1 px-4 border border-solid border-white bg-white text-black rounded-t inline-block text-center"
      >
        Equalizer
      </h1>
      <div class="flex gap-0.5 bg-white border border-solid border-white">
        <label class="px-4 py-1 h-full bg-black transition" for="ch1"
          >Channel 1</label
        >
        <label class="px-4 py-1 h-full bg-black transition" for="ch2"
          >Channel 2</label
        >
      </div>
    </div>
    <div
      class="border-white border-solid border text-white rounded-bl-xl p-4 bg-white/5"
    >
      <div id="view1" class="hidden flex-col gap-8 grow-1">
        <div class="grid grid-cols-2 gap-6">
          <XPass id="lowpass1" pass="low" channel={0} />
          <XPass id="highpass1" pass="high" channel={0} />
        </div>
        <div class="grid grid-cols-5 gap-4">
          {
            new Array(5).fill(0).map((_, index) => (
              <div>
                <div class="inline-block px-2 py-0.5 rounded-t bg-white text-black">
                  EQ {index + 1}
                </div>
                <div class="border border-solid rounded rounded-tl-none relative p-4">
                  EQ goes here
                </div>
              </div>
            ))
          }
        </div>
      </div>
      <div id="view2" class="hidden flex-col gap-8 grow-1">
        <div class="grid grid-cols-2 gap-6">
          <XPass id="lowpass2" pass="low" channel={1} />
          <XPass id="highpass2" pass="high" channel={1} />
        </div>
        <div class="grid grid-cols-5 gap-4">
          {
            new Array(5).fill(0).map((_, index) => (
              <div>
                <div class="inline-block px-2 py-0.5 rounded-t bg-white text-black">
                  EQ {index + 1}
                </div>
                <div class="border border-solid rounded rounded-tl-none relative p-4">
                  EQ goes here
                </div>
              </div>
            ))
          }
        </div>
      </div>
    </div>
    <div class="flex justify-end pt-4">
      <Button text="Save" onclick="save" />
    </div>
  </div>

  <script>
    import Chart from "chart.js/auto";
    import { createData } from "../dsp.ts";
    import { eq, type EQConfig } from "../global.ts";
    import { chartData } from "../chart.ts";
    import { throttled } from "../utils.ts";

    const lowPassElem1 = document.getElementById("lowpass1") as HTMLElement;
    const highPassElem1 = document.getElementById("highpass1") as HTMLElement;
    const lowPassElem2 = document.getElementById("lowpass2") as HTMLElement;
    const highPassElem2 = document.getElementById("highpass2") as HTMLElement;

    let newEq: EQConfig[];
    try {
      let response = await fetch("/api?action=get_all");
      newEq = await response.json();
    } catch {
      newEq = [
        {
          lowpass: { q: 0.7, freq: 430, order: 2 },
          highpass: { q: 0.7, freq: 430, order: 0 },
        },
        {
          lowpass: { q: 0.7, freq: 430, order: 2 },
          highpass: { q: 0.7, freq: 430, order: 0 },
        },
      ];
    }

    eq.set(newEq);

    lowPassElem1.setAttribute("freq", newEq[0].lowpass.freq.toString());
    lowPassElem1.setAttribute("q", newEq[0].lowpass.q.toString());
    lowPassElem1.setAttribute("order", newEq[0].lowpass.order.toString());

    highPassElem1.setAttribute("freq", newEq[0].highpass.freq.toString());
    highPassElem1.setAttribute("q", newEq[0].highpass.q.toString());
    highPassElem1.setAttribute("order", newEq[0].highpass.order.toString());

    lowPassElem2.setAttribute("freq", newEq[1].lowpass.freq.toString());
    lowPassElem2.setAttribute("q", newEq[1].lowpass.q.toString());
    lowPassElem2.setAttribute("order", newEq[1].lowpass.order.toString());

    highPassElem2.setAttribute("freq", newEq[1].highpass.freq.toString());
    highPassElem2.setAttribute("q", newEq[1].highpass.q.toString());
    highPassElem2.setAttribute("order", newEq[1].highpass.order.toString());

    const graphCanvas = document.getElementById("graph") as HTMLCanvasElement;

    const data1 = createData(eq.value[0]);
    const data2 = createData(eq.value[1]);

    const chart = new Chart(graphCanvas, chartData(data1, data2));
    window.addEventListener("save", async (_e) => {
      console.log("saving");
      await fetch("/api?action=save");
    });
    const throttleFetch = throttled(fetch, 200);
    const throttleLog = throttled(console.log, 200);
    window.addEventListener("update", (e) => {
      const event = e as CustomEvent<{ lul: string }>;
      chart.data.datasets[0].data = createData(eq.get()[0]);
      chart.data.datasets[1].data = createData(eq.get()[1]);
      chart.update();

      const search = new URLSearchParams({
        action: "set",
        ...event.detail,
      });
      throttleFetch("/api?" + search.toString());
    });
  </script>
</Layout>
